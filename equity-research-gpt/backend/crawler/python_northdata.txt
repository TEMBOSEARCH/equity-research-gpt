import os, time, logging, requests
from typing import Dict, Any, Optional

log = logging.getLogger("northdata")

NORTHDATA_BASE = os.getenv("NORTHDATA_BASE", "https://www.northdata.de/_api")
API_KEY = os.getenv("NORTHDATA_API_KEY")

class NorthDataClient:
    def __init__(self, api_key: Optional[str] = None, base: Optional[str] = None):
        self.base = base or NORTHDATA_BASE
        self.api_key = api_key or API_KEY
        if not self.api_key:
            raise RuntimeError("NORTHDATA_API_KEY not set")

    def _get(self, path: str, params: Dict[str, Any]) -> Dict[str, Any]:
        # North Data expects api_key as query param (per Swagger & examples)
        # Respect ~300 req/min by adding small sleeps in loops if needed.
        url = f"{self.base}{path}"
        params = {"api_key": self.api_key, **{k:v for k,v in params.items() if v is not None}}
        r = requests.get(url, params=params, timeout=30)
        r.raise_for_status()
        # optional: X-RateLimit headers could be observed; we keep it simple
        return r.json()

    # Universal company/person search (autocomplete best matches)
    def universal_search(self, query: str, domain: str = "company", limit: int = 10, countries=None):
        return self._get("/search/v1/universal", {
            "query": query, "domain": domain, "limit": limit, "countries": countries
        })

    # Publications stream (global) â€“ page with 'pos' cursor
    def publications(self, source: str, min_ts: Optional[str] = None, max_ts: Optional[str] = None,
                     min_pub_date: Optional[str] = None, max_pub_date: Optional[str] = None,
                     pos: Optional[str] = None, limit: int = 10):
        return self._get("/pub/v1/publications", {
            "source": source,
            "minTimestamp": min_ts, "maxTimestamp": max_ts,
            "minPublicationDate": min_pub_date, "maxPublicationDate": max_pub_date,
            "pos": pos, "limit": limit
        })

    # Publications for a specific company
    def company_publications(self, name: Optional[str] = None, register_id: Optional[str] = None,
                             register_city: Optional[str] = None, register_key: Optional[str] = None,
                             source: Optional[str] = "bundesanzeiger", limit: int = 50,
                             min_pub_date: Optional[str] = None, max_pub_date: Optional[str] = None):
        return self._get("/company/v1/publications", {
            "name": name, "registerId": register_id, "registerCity": register_city,
            "registerKey": register_key, "source": source, "limit": limit,
            "minPublicationDate": min_pub_date, "maxPublicationDate": max_pub_date, "fuzzyMatch": True
        })
